from Modules.ResourceManager.utils.util_helpers import *

# Entrypoint
def run_module(user_args, session, first_run = False, last_run = False):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Set the IAM Policy for a Given Organization", allow_abbrev=False)
    
    # Debug/non-module specific
    parser.add_argument("-v","--debug",action="store_true",required=False,help="Get verbose data during the module run")
    
    # Module specific arguments
    parser.add_argument("--organization-name", type=str, required=False,  help="Organization system name (not user-assigned common name) ex: organizations/ID")
    parser.add_argument("--member", type=str, required=False,  help="User to add, not supplying will default to current email; format user:[email] or serviceAccount:[serviceemail].")
    exclusive_group = parser.add_mutually_exclusive_group(required=False)
    exclusive_group.add_argument("--default-role", action="store_true", help="Attach the default role; roles/owner")
    exclusive_group.add_argument("--role", type=str, required=False,  help="Role to bind the member to on the folder resource")

    parser.add_argument("--brute", action="store_true", required=False,  help="If the current policy cannot be gathered and appended to, rewrite entire IAM policy with just your member")

    args = parser.parse_args(user_args)

    debug = args.debug

    organization_client = resourcemanager_v3.OrganizationsClient(credentials=session.credentials)

    organization_name, member, role = None, None, None

    if args.organization_name:
        organization_name = args.organization_name

    if args.member:
        member = args.member

    if args.role:
        role = args.role


    if not organization_name:
        rows_returned = session.get_data("abstract-tree-hierarchy", columns = ["name", "display_name"], conditions = "type=\"org\"")
        if len(rows_returned) == 0:
            print("[X] No organizations found. Try rerunning module with with specified resource via --organization-name ")
            return -1

        for row in rows_returned:
            name, display_name = row["name"], row["display_name"]
            row["display_to_user"] = f"{name} (aka \"{display_name}\")"

        # Return dictionary corresponding to user choice
        organization_dict = session.choice_selector(rows_returned,"Choose an existing organization from below to set the IAM policy:", fields=["display_to_user"])
        
        if not organization_dict:
            print("[X] Exiting the current module...")
            return -1   

        # Project ID could be "Unknown"
        organization_name = organization_dict["name"]


    if not member:
        member = session.choose_member()
        if not member:
            print("Exiting...")
            return -1
    
    if not role:
        default_role = "roles/resourcemanager.organizationAdmin"
        organization_roles_sample = [
            "roles/owner",
            "roles/editor",
            "roles/viewer",
            f"{default_role} (Default)",
            "roles/resourcemanager.organizationViewer",
            "roles/orgpolicy.policyAdmin",
            "roles/browser"
            "Exit"
        ]
        role = session.choose_role(organization_roles_sample, chosen_role = args.role, default_role = default_role)
        if not role:
            return -1

    if debug:
        print(f"[DEBUG] Proceeding with:\n  Organization:{organization_name}\n")
        print(f"[DEBUG] Proceeding with member: {member}")
        print(f"[DEBUG] Proceeding with role: {role}")

    print(f"[*] Binding Member {member} on {organization_name} to role {role}")

    action_dict = {}

    status = add_organization_iam_member(organization_client, organization_name, member, action_dict, brute = args.brute, role = role, debug=debug)

    if status:
        print(f"[*] Successfully added {member} to the policy of function {organization_name}")
            
    if action_dict: session.insert_actions(action_dict) 