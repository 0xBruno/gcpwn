from Modules.ResourceManager.utils.util_helpers import *

# Entrypoint
def run_module(user_args, session, first_run = False, last_run = False):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Set the IAM Policy for a Given Folder", allow_abbrev=False)
    
    # Debug/non-module specific
    parser.add_argument("-v","--debug",action="store_true",required=False,help="Get verbose data during the module run")
    
    # Module specific arguments
    parser.add_argument("--folder-name", type=str, required=False,  help="Folder system name (not user-assigned common name) ex: folders/ID")
    parser.add_argument("--member", type=str, required=False,  help="User to add, not supplying will default to current email; format user:[email] or serviceAccount:[serviceemail].")
    
    exclusive_group = parser.add_mutually_exclusive_group(required=False)
    exclusive_group.add_argument("--default-role", action="store_true", help="Attach the default role; roles/owner")
    exclusive_group.add_argument("--role", type=str, required=False,  help="Role to bind the member to on the folder resource")

    parser.add_argument("--brute", action="store_true", required=False,  help="If the current policy cannot be gathered and appended to, rewrite entire IAM policy with just your member")

    args = parser.parse_args(user_args)

    debug = args.debug

    folder_client = resourcemanager_v3.FoldersClient(credentials=session.credentials)

    folder_name, member, role = None, None, None

    if args.folder_name:
        folder_name = args.folder_name

    if args.member:
        member = args.member

    if args.role:
        role = args.role

    if not folder_name:
        rows_returned = session.get_data("abstract-tree-hierarchy", columns = ["name", "display_name"], conditions = "type=\"folder\"")
        if len(rows_returned) == 0:
            print("[X] No folders found. Try rerunning module with with specified resource via --folder-name ")
            return -1
        
        # Return dictionary corresponding to user choice

        for row in rows_returned:
            name, display_name = row["name"], row["display_name"]
            row["display_to_user"] = f"{name} (aka \"{display_name}\")"

        folder_dict = session.choice_selector(rows_returned,"Choose an existing folder from below to set the IAM policy:", fields=["display_to_user"])
        if not folder_dict:
            print("[X] Exiting the current module...")
            return -1

        # Project ID could be "Unknown"
        folder_name = folder_dict["name"]

    if not member:
        member = session.choose_member()
        if not member:
            print("Exiting...")
            return -1
    
    if not role:
        default_role = "roles/owner"
        suggested_folder_roles = [
            f"{default_role} (Default)",
            "roles/editor",
            "roles/viewer",
            "roles/resourcemanager.folderAdmin",
            "roles/resourcemanager.folderIamAdmin",
            "roles/resourcemanager.folderCreator",
            "roles/resourcemanager.folderEditor",
            "roles/resourcemanager.folderViewer",
        ]
        role = session.choose_role(suggested_folder_roles, chosen_role = args.role, default_role = default_role)
        if not role:
            return -1

    if debug:
        print(f"[DEBUG] Proceeding with:\n  Folder:{folder_name}\n")
        print(f"[DEBUG] Proceeding with member: {member}")
        print(f"[DEBUG] Proceeding with role: {role}")

    print(f"[*] Binding Member {member} on {folder_name} to role {role}")

    action_dict = {}

    status = add_folder_iam_member(folder_client, folder_name, member, action_dict, brute = args.brute, role = role, debug=debug)

    if status:
        print(f"[*] Successfully added {member} to the policy of function {folder_name}")
            
    if action_dict: session.insert_actions(action_dict) 